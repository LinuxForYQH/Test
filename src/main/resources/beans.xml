<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:mvc="http://www.springframework.org/schema/mvc"
	   xmlns:task="http://www.springframework.org/schema/task"
	   xmlns:cache="http://www.springframework.org/schema/cache"
	   xmlns:p="http://www.springframework.org/schema/p"

	   xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.3.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
         http://www.springframework.org/schema/mvc
         http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
         http://www.springframework.org/schema/task
         http://www.springframework.org/schema/task/spring-task-3.0.xsd
         http://www.springframework.org/schema/cache
         http://www.springframework.org/schema/cache/spring-cache.xsd">



	<!--※※※※※※※※※※※※※shiro安全架构的bean容器※※※※※※※※※※※※※※※-->
	<!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的Realm01.java且使用MD5加密
    <bean id="hashMatcher" class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
        <property name="hashAlgorithmName" value="md5"/>
		<property name="storedCredentialsHexEncoded" value="true"></property>
	</bean>
	<bean id="myRealm" class="com.shiro.myRealm.Realm01">
        <property name="credentialsMatcher" ref="hashMatcher"/>
    </bean> -->

	<!-- 开启spring的过滤器，到该过滤链的时候，判断用户是否有权
	<bean id="filter" class="com.shiro.filter.MyAccessControlFilter"/>
	<bean id="filter2" class="com.shiro.filter.HtmlControlFilter"/>-->

	<!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
	<!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
	<!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm"/>
	</bean>-->

	<!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		 Shiro的核心安全接口,这个属性是必须的
		<property name="securityManager" ref="securityManager"/>
		没有认证，跳转的页面
		<property name="unauthorizedUrl" value="/staticWEBFILE/login.html"/>
		<property name="loginUrl" value="/staticWEBFILE/login.html"/>
		 Shiro连接约束配置,即过滤链的定义
		<property name="filterChainDefinitions">
			<value>
                /html/**=authc
				/**=filter2
			</value>
		</property>
	</bean>-->

	<!--※※※※※※※※※※※※※验证码※※※※※※※※※※※※※※※
	<bean id="imageCaptchaService"
		  class="com.octo.captcha.service.image.DefaultManageableImageCaptchaService">
		<property name="captchaEngine">
			<bean class="com.until.CaptchaEngine" />
		</property>
		<property name="minGuarantedStorageDelayInSeconds" value="3600" />
	</bean>-->

	<!--※※※※※※※※※※※※※Spring mvc 和Freemarker配置※※※※※※※※※※※※※※※-->
	<!--  freeMarker配置 -->
	<bean id="freemarkerConfig"
		  class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<property name="templateLoaderPath" value="/html/" />
		<property name="freemarkerSettings">
			<props>
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="number_format">0.##########</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
			</props>
		</property>
	</bean>

	<!--  freeMarker视图解析器 -->
	<bean id="viewResolverFtl" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.freemarker.FreeMarkerView"/>
		<property name="contentType" value="text/html; charset=UTF-8"/>
		<property name="exposeRequestAttributes" value="true" />
		<property name="exposeSessionAttributes" value="true" />
		<property name="exposeSpringMacroHelpers" value="true" />
		<property name="cache" value="true" />
		<property name="order" value="0"/>
	</bean>
	<!--  jsp视图解析器 -->
	<bean id="viewResolver"
		  class="org.springframework.web.servlet.view.InternalResourceViewResolver" ></bean>

	<!-- 由于web.xml中设置是：由SpringMVC拦截所有请求,于是在读取静态资源文件的时候就会受到影响(说白了就是读不到) -->
	<!-- 经过下面的配置，该标签的作用就是：所有页面中引用"/js/**"的资源，都会从"/resources/js/"里面进行查找
	<mvc:resources mapping="/html/js/**" location="/html/js/" />
	<mvc:resources mapping="/html/**" location="/html/"/>
	<mvc:resources mapping="/staticWEBFILE/**" location="/staticWEBFILE/"/>-->

	<!-- springmvc 字符码json转换
	<bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter" >
		<property name="messageConverters">
			<list>
				<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
				<bean class="org.springframework.http.converter.StringHttpMessageConverter">
					<property name="supportedMediaTypes">
						<list>
							<value>text/plain;charset=UTF-8</value>
						</list>
					</property>
				</bean>
			</list>
		</property>
	</bean>-->



	<!-- SpringMVC在超出上传文件限制时，会抛出org.springframework.web.multipart.MaxUploadSizeExceededException -->
	<!-- 该异常是SpringMVC在检查上传的文件信息时抛出来的，而且此时还没有进入到Controller方法中 -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<!-- 遇到MaxUploadSizeExceededException异常时，自动跳转到/WEB-INF/error_fileupload.jsp页面 -->
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">WEB-INF/error_fileupload</prop>
				<!-- 处理其它异常(包括Controller抛出的)
				<prop key="java.lang.Throwable">/html/login.html</prop>-->
			</props>
		</property>
	</bean>
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="10000000"/>
		<property name="maxInMemorySize" value="10240" />
	</bean>

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean class="org.springframework.http.converter.StringHttpMessageConverter" />
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter" />
		</mvc:message-converters>
	</mvc:annotation-driven>



	<!--※※※※※※※※※※※※※spring相关的配置※※※※※※※※※※※※※※※-->
	<!-- 打开Spring的Annotation支持 -->
	<context:annotation-config />
	<!-- 设定Spring 去哪些包中找Annotation -->
	<context:component-scan base-package="com" />

	<!--spring task定时器-->


	<!--spring多线程，线程池-->
	<bean id="taskExecutor"
		  class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
		<property name="corePoolSize" value="3" />
		<property name="maxPoolSize" value="20" />
		<property name="WaitForTasksToCompleteOnShutdown" value="true" />
	</bean>


	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/you_picc?useUnicode=true&amp;characterEncoding=UTF-8" />
		<property name="username" value="root" />
		<property name="password" value="admin" />
		<!-- 配置连接池的初始值 -->
		<property name="initialSize" value="1" />
		<!-- 连接池的最大值 -->
		<!-- <property name="maxActive" value="500"/> -->
		<!-- 最大空闲时，当经过一个高峰之后，连接池可以将一些用不到的连接释放，一直减少到maxIdle为止 -->
		<!-- <property name="maxIdle" value="2"/> -->
		<!-- 当最小空闲时，当连接少于minIdle时会自动去申请一些连接 -->
		<property name="minIdle" value="6" />
		<property name="maxActive" value="100" />
		<property name="maxWait" value="1000" />
	</bean>

	<!--
	和hibernate4整合没有提供专门的针对Annotation的类，直接在LocalSessionFactoryBean中已经集成
    -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 设置Spring取那个包中查找相应的实体类 -->
		<property name="packagesToScan">
			<value>com</value>
		</property>
		<property name="hibernateProperties">
			<!-- <value> hibernate.dialect=org.hibernate.dialect.HSQLDialect </value> -->
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<!----><prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.format_sql">true</prop>
			</props>
		</property>

	</bean>

	<!-- 配置Spring的事务处理 -->
	<!-- 创建事务管理器-->
	<bean id="txManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!--开启aop切面注解-->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
	<bean class="org.springframework.aop.aspectj.annotation.AnnotationAwareAspectJAutoProxyCreator" />
	<!--注入aop切面-->

	<!-- spring缓存管理器-->
	<cache:annotation-driven />
	<bean id="cacheManager"
		  class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<!-- spring默认缓存-->
				<bean class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					  p:name="default" />

			</set>
		</property>
	</bean>



	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
	<aop:config>
	<!-- 设置pointCut表示哪些方法要加入事务处理 -->
	<!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
		就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
		<aop:pointcut id="allMethods"
			expression="execution(* com.*.*(..))" />
		<!-- 通过advisor来确定具体要加入事务控制的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allMethods" />
	</aop:config>
    <!-- 配置哪些方法要加入事务控制 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务  read-only="true"-->
			<tx:method name="*" propagation="REQUIRED"/>
			<!-- 以下方法都是可能设计修改的方法，就无法设置为只读-->
			<tx:method name="add*" propagation="REQUIRED"/>
			<tx:method name="del*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="clear*" propagation="REQUIRED"/>
			<tx:method name="empty*" propagation="REQUIRED"/>
			<tx:method name="init*" propagation="REQUIRED"/>

		</tx:attributes>
	</tx:advice>



</beans>